#!/usr/bin/perl
use 5.10.0;
use strict;
use warnings;
use Test::More;
use t::util::Util;

main(@ARGV);
exit;

BEGIN { # XXX older version of Test::More has no note()
    if(not defined &note) {
        if(-t STDOUT) {
            *note = \&diag;
        }
        else {
            *note = sub { };
        }
    }
}

sub bench {
    my ($f) = @_;
    require Time::HiRes;
    my $start = [Time::HiRes::gettimeofday()];
    my $ret = $f->();
    return ($ret, Time::HiRes::tv_interval($start));
}

sub main {
    my($file) = @_ or die "no args";

    local $TODO = 'not yet' if ($file =~ /\.todo\.jsx$/);

    if(my @shebang = get_shebang($file)) {
        exec @shebang, $file;
    }
    elsif($file =~ m{ /run/ }xms) {
        compile_and_run($file);
    }
    elsif($file =~ m{ /compile_error/ }xms) {
        expect_compile_error($file);
    }
    elsif($file =~ m{ /lib/ }xms) {
        run_test($file);
    }
    elsif($file =~ m{ /optimize/ }xms) {
        optimize_and_compare($file);
    }
    elsif($file =~ m{ /optimize-bench/ }xms) {
        optimize_and_compare($file, 1);
    }
    else {
        plan tests => 1;
        pass "(unknown file: $file)";
    }
}

sub get_shebang {
    my($file) = @_;

    open my($fh), "<", $file or die "Cannot open $file for reading: $!";
    my $first = <$fh>;
    close $fh;

    return grep { defined } $first =~ /\A \#\! \s* (\S+) (?: \s+ (\S+) )* /xmsg;
}

sub compile_to_run {
    my ($file, $opts) = @_;
    $opts ||= "";

    my $src = `bin/jsx $opts $file`;
    return if $? != 0;

    return $src;
}

sub run_compiled {
    my ($filename, $src) = @_;

    require File::Temp;

    # add the bootstrap code
    $src .= sprintf <<'EOT', $filename;
// workaround for node.js to set "JSX" to global
(function () { return this; })().JSX = JSX;
// invoke the test
try {
    JSX.require("%s").Test.run$();
} catch (e) {
    console.log(e.message.replace(/^\[.*?\]\s*/, ""));
}
EOT

    # write to temp file
    my $temp = File::Temp->new(SUFFIX => ".js");
    $temp->print($src);
    $temp->close();

    # execute compiled node
    open my $fh, "-|", "node $temp"
        or die "failed to invoke node:$!";
    local $/;
    my $output = <$fh>;
    close $fh;

    return if $? != 0;

    return $output;
}

sub compile_and_run {
    my($file) = @_;

    plan tests => 1;

    defined(my $expected = get_section($file, "EXPECTED"))
        or die "could not find EXPECTED in file:$file\n";

    # compile (FIXME support C++)
    my $src = compile_to_run($file) or do {
        fail "compile '$file' failed: $?";
        return;
    };
    # run
    defined (my $output = run_compiled($file, $src)) or do {
        fail "failed to execute compiled script";
        return;
    };
    # compare the results
    is $output, $expected, $file;
}

sub optimize_and_compare {
    my ($file, $do_bench) = @_;

    plan skip_all => 'environment variable JSX_OPTS is set'
        if defined $ENV{JSX_OPTS};

    plan tests => 1;

    defined(my $expected = get_section($file, "EXPECTED"))
        or die "could not find EXPECTED in file:$file\n";
    defined(my $opts = get_section($file, "JSX_OPTS"))
        or die "cloud not ifnd JSX_OPTIONS in file:$file\n";

    chomp $opts;

    # compile, run, and check (wo. optimization)
    my $src = compile_to_run($file) or do {
        fail "compile '$file' failed: $?";
        return;
    };
    my ($output, $elapsed) = bench(sub { run_compiled($file, $src) });
    defined $output or do {
        fail "failed to execute compiled script";
        return;
    };
    if ($output ne $expected) {
        # do not continue if the result is wrong
        is $output, $expected, "$file (not optimized)";
        return;
    }

    # compile, run, and check (w. optimization)
    my $src_optimized = compile_to_run($file, $opts) or do {
        fail "compile '$file' with '$opts' failed: $?";
        return;
    };
    if ($src eq $src_optimized) {
        fail "no change by optimization found in the generated code";
        return;
    }
    ($output, my $elapsed_optimized) = bench(sub { run_compiled($file, $src_optimized) });
    defined $output or do {
        fail "failed to execute compiled script with optimization: $opts";
        return;
    };
    if (! $do_bench || $output ne $expected) {
        is $output, $expected, $file;
        return;
    }

    # check the times
    if ($do_bench) {
        if ($elapsed < 0.5) {
            fail "$file (unoptimized) exited too early ($elapsed seconds)";
            return;
        }
        if ($elapsed_optimized < 0.5) {
            fail "$file (optimized) exited too early ($elapsed_optimized seconds)";
            return;
        }
        my $ratio = ($elapsed / $elapsed_optimized) * 100 - 100;
        cmp_ok $ratio, '>=', 5, "$file - $ratio\% faster by optimization";
        diag "$file - $ratio\% faster by optimization";
    }
}

sub expect_compile_error {
    my($file) = @_;

    plan tests => 2;


    my $err = `bin/jsx $file 2>&1`;
    isnt $?, 0, "compiling $file failed with non-zero status";
    unlike $err, qr/process\.nextTick error/, "... without compiler clash";
    note $err;
}

sub run_test {
    my($file) = @_;

    exec("bin/jsx", "--test", $file) == 0
        or die "Cannot exec bin/jsx --test $file";
}
